<!DOCTYPE html>
<html>
	<head>
		<title>Fun</title>
	</head>
	<body>
		<div>
			<select id="selectEffect">
				<option value="noEffect">noEffect</option>
				<option value="BlackAndWhite">BlackAndWhite</option>
				<option value="FT">FT</option>
				<option value="AddNoise">AddNoise</option>
			</select>
			<div effectOptions></div>
		</div>
		<div>
			<video id="video" width="256" height="256"></video>
			<canvas id="canvas"></canvas>
		</div>
	</body>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.js"></script>
	<script>
		(function() {
			function init() {

				addFunctionOptions();

				var effectFunction;
				/**
				 * goes pixel by pixesl and calls pixelEffectFn on each pixel by passing it  imageData, x, y object
				 * where x increases to the right if the screen and y increases to the bottom of the screen x:[0-width] y:[0-height]
				 */
				function pixelByPixelIteration(canvasB, imageFunction) {
					var c = canvasB.getContext('2d');
					var w = canvasB.width;
					var h = canvasB.height;
					var data = c.getImageData(0, 0, w, h);

					var x, y;
					for( x = 0; x < w; x += 1) {
						for( y = 0; y < h; y += 1) {
							imageFunction(data, x, y);
						}
					}
					c.putImageData(data, 0, 0);
				}

				var canvas = document.getElementById('canvas');
				var canvasBuff = document.createElement('canvas');
				canvasBuff.id = 'canvasBufferId';

				var canvasContext = canvas.getContext('2d');
				canvasContext.id = 'canvasContextId';
				var canvasBuffContext = canvasBuff.getContext('2d');
				canvasBuffContext.id = 'canvasBufferContextId';
				var localVideo = document.getElementById('video');
				var samplingInterval = null;
				var samplingPeriod = 100;
				effectFunction = function(canvasB) {

				};
				/*************FFT code came from http://nklein.com/2009/09/fourier-transforms-in-javascript/***************/
				function __getNextPowerOfTwo(nn) {
					var pp = 1;
					while(pp < nn) {
						pp *= 2;
					}
					return pp;
				}

				function prepImageForFFT(_imageId, _canvasId) {
					var image = document.getElementById(_imageId);
					var canvas = document.getElementById(_canvasId);
					if(!image || !canvas) {
						return false;
					}
					var ww = __getNextPowerOfTwo(image.width);
					var hh = __getNextPowerOfTwo(image.height);
					canvas.width = ww;
					canvas.height = hh;
					var context = canvas.getContext('2d');
					if(!context) {
						return false;
					}
					context.drawImage(image, 0, 0, ww, hh);
					return true;
				}

				function __rearrangeSamples(_array, _offset, _ww, _stride) {
					var target = 0;
					for(var pos = 0; pos < _ww; ++pos) {
						if(target > pos) {
							for(var kk = 0; kk < 4; ++kk) {
								var tmp = _array[target * _stride + kk + _offset];
								_array[target * _stride + kk + _offset] = _array[pos * _stride + kk + _offset];
								_array[pos * _stride + kk + _offset] = tmp;
							}
						}
						var mask = _ww;
						while((target & (mask >>= 1 ) )) {
							target &= ~mask;
						}
						target |= mask;
					}
				}

				function __shiftSamples(_samps, _base, _ww, _stride) {
					var mid = _base + _ww * _stride / 2;
					for(var ii = 0; ii < _ww / 2; ++ii) {
						for(var kk = 0; kk < 3; ++kk) {
							var tmp = _samps[_base + ii * _stride + kk];
							_samps[_base + ii * _stride + kk] = _samps[mid + ii * _stride + kk];
							_samps[mid + ii * _stride + kk] = tmp;
						}
					}
				}

				function __performFFT(_real, _imag, _ww, _hh, _dx, _dy, _inverse) {
					for(var jj = 0; jj < _hh; ++jj) {
						if(_inverse) {
							__shiftSamples(_real, jj * _dy, _ww, _dx);
							__shiftSamples(_imag, jj * _dy, _ww, _dx);
						}
						__rearrangeSamples(_real, jj * _dy, _ww, _dx);
						__rearrangeSamples(_imag, jj * _dy, _ww, _dx);
						var pi = Math.PI;
						//3.14159265358979323846264338327950288;
						var angularScale = (_inverse ) ? pi : -pi;
						for(var step = 1; step < _ww; step += step) {
							var delta = angularScale / step;
							var sine = Math.sin(delta / 2.0);
							var fac_r = 1.0;
							var fac_i = 0.0;
							var mul_r = -2.0 * sine * sine;
							var mul_i = Math.sin(delta);
							for(var group = 0; group < step; ++group) {
								for(var pair = group; pair < _ww; pair += step * 2) {
									var match = pair + step;
									for(var kk = 0; kk < 3; ++kk) {
										var commonSum = jj * _dy + kk;
										//var p_index = jj * _dy + pair * _dx + kk;
										//var m_index = jj * _dy + match * _dx + kk;
										var p_index = commonSum + pair * _dx;
										var m_index = commonSum + match * _dx;

										var rr = _real[m_index];
										var ii = _imag[m_index];
										var prod_r = rr * fac_r - ii * fac_i;
										var prod_i = rr * fac_i + ii * fac_r;
										_real[m_index] = _real[p_index] - prod_r;
										_imag[m_index] = _imag[p_index] - prod_i;
										_real[p_index] += prod_r;
										_imag[p_index] += prod_i;
									}
								}
								var inc_r = mul_r * fac_r - mul_i * fac_i;
								var inc_i = mul_r * fac_i + mul_i * fac_r;
								fac_r += inc_r;
								fac_i += inc_i;
							}
						}
						if(!_inverse) {
							__shiftSamples(_real, jj * _dy, _ww, _dx);
							__shiftSamples(_imag, jj * _dy, _ww, _dx);
						}
					}
					return {
						width : _ww,
						height : _hh,
						real : _real,
						imag : _imag,
					};
				}

				function FFT(canvasLocal) {
					//var canvasLocal = document.getElementById(_canvasId);
					if(!canvasLocal) {
						return false;
					}
					var ww = canvasLocal.width;
					var hh = canvasLocal.height;
					var context = canvasLocal.getContext('2d');
					if(!context) {
						return false;
					}
					var rawResult = context.getImageData(0, 0, ww, hh);
					var result = rawResult.data;
					var real = new Array();
					var imag = new Array();
					real.length = ww * hh * 4;
					imag.length = ww * hh * 4;
					for(var pp = 0; pp < result.length; ++pp) {
						real[pp] = result[pp] / 255.0;
						imag[pp] = 0.0;
					}
					var fftData = __performFFT(real, imag, ww, hh, 4, ww * 4, false);
					__performFFT(real, imag, hh, ww, ww * 4, 4, false);
					for(var pp = 0; pp < result.length; pp += 4) {
						for(var kk = 0; kk < 3; ++kk) {
							var index = pp + kk;
							var rr = real[index];
							var ii = imag[index];
							result[index] = Math.sqrt(rr * rr + ii * ii);
						}
						result[pp + 3] = 255;
					}
					context.putImageData(rawResult, 0, 0);
					return fftData;
				}

				function IFFT(_fftData, _canvasId) {
					var canvasLocal = document.getElementById(_canvasId);
					if(!canvasLocal) {
						return false;
					}
					var ww = _fftData.width;
					var hh = _fftData.height;
					canvasLocal.width = ww;
					canvasLocal.height = hh;
					var context = canvasLocal.getContext('2d');
					if(!context) {
						return false;
					}
					var real = _fftData.real;
					var imag = _fftData.imag;
					__performFFT(real, imag, hh, ww, ww * 4, 4, true);
					__performFFT(real, imag, ww, hh, 4, ww * 4, true);
					var rawResult = context.getImageData(0, 0, ww, hh);
					var result = rawResult.data;
					var scale = ww * hh;
					for(var pp = 0; pp < result.length; pp += 4) {
						for(var kk = 0; kk < 3; ++kk) {
							var index = pp + kk;
							var vv = 255.0 * real[index] / scale;
							if(vv < 0) {
								vv = 0;
							} else if(255 < vv) {
								vv = 255;
							}
							result[index] = vv;
						}
						result[pp + 3] = 255;
					}
					context.putImageData(rawResult, 0, 0);
					return true;
				}

				/*****************************/
				function fourierTransform(canvasB) {
					FFT(canvasB);
					console.log('done ft');
				}

				function generateGaussianSample(mean, stdev) {
					//Box-muller transform
					//http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
					var mu = mean;
					var sigma = stdev;
					var u1 = Math.random();
					var u2 = Math.random();
					return sigma * Math.sqrt(-2 * Math.log(u1)) * Math.cos(twoPI * u2) + mean;
				}

				function clamp(val, min, max) {
					val = val >= min ? val : min;
					return val <= max ? val : max;
				}

				function addNoise(canvasB, mean, stdev) {
					mean = mean ? mean : 128;
					stdev = stdev ? stdev : 128;
					pixelByPixelIteration(canvasB, function(data, x, y) {
						var p = getPixel(data, x, y);
						p.r = p.r + generateGaussianSample(mean, stdev);
						p.r = clamp(p.r, 0, 255);
						p.g = p.g + generateGaussianSample(mean, stdev);
						p.g = clamp(p.g, 0, 255);
						p.b = p.b + generateGaussianSample(mean, stdev);
						p.b = clamp(p.b, 0, 255);
						setPixel(data, p.x, p.y, p.r, p.g, p.b, p.a);
					});
				}


				addNoise.setup = function() {

				};

				addNoise.tearDown = function() {

				};
				function blackAndWhite(canvasB) {
					pixelByPixelIteration(canvasB, function(data, x, y) {
						var p = getPixel(data, x, y);
						var avg = getPixelAverage(p);
						setPixel(data, x, y, avg, avg, avg, p.a);
					});
				}

				function getRandmom8bit() {
					return r = Math.random() * 255;
				}

				function nothing() {
				};
				var twoPI = 2 * Math.PI;

				function addFunctionOptions() {
					var sel = document.getElementById('selectEffect');
					$(sel).bind('change', function(event) {
						var selection = event.target.value;
						switch(selection) {
							case 'BlackAndWhite':
								effectFunction = blackAndWhite;
								break;
							case 'AddNoise':
								effectFunction = addNoise;
								break;
							case 'FT':
								effectFunction = fourierTransform;
								break;
							default:
								effectFunction = nothing;
						}
					});
				}

				function getDataIndex(imageData, x, y) {
					return (x + y * imageData.width) * 4;
				}

				function setPixel(imageData, x, y, r, g, b, a) {
					var index = getDataIndex(imageData, x, y);
					imageData.data[index + 0] = r;
					imageData.data[index + 1] = g;
					imageData.data[index + 2] = b;
					imageData.data[index + 3] = a;
				}

				function getPixel(imageData, x, y) {
					var index = getDataIndex(imageData, x, y);
					var data = imageData.data;
					return {
						'x' : x,
						'y' : y,
						'r' : data[index],
						'g' : data[index + 1],
						'b' : data[index + 2],
						'a' : data[index + 3]

					};
				}

				function getPixelAverage(p) {
					return (p.r + p.g + p.b) / 3;
				}

				function drawVideoToBuffCanvas() {
					var canvasW = canvasBuff.width;
					var canvasH = canvasBuff.height;
					canvasBuffContext.drawImage(localVideo, 0, 0, canvasW, canvasH);

				}

				function drawBuffToCanvas() {
					canvasContext.drawImage(canvasBuff, 0, 0, canvasBuff.width, canvasBuff.height);
				}

				function samplingIntervalCall() {
					drawVideoToBuffCanvas();
					effectFunction(canvasBuff);
					drawBuffToCanvas();
				}

				function createCanvasCapture() {
					var w = $(localVideo).width();
					var h = $(localVideo).height();
					canvasBuff.width = w;
					canvasBuff.height = h;

					canvas.width = w;
					canvas.height = h;

					clearInterval(samplingInterval);
					samplingInterval = setInterval(samplingIntervalCall, samplingPeriod);
				}

				function onUserMediaSuccess(stream) {
					console.log("User has granted access to local media.");
					var url = webkitURL.createObjectURL(stream);
					localVideo.style.opacity = 1;
					$(localVideo).bind('canplay', function() {
						createCanvasCapture();
					});
					localVideo.src = url;
					localStream = stream;
					localVideo.autoplay = true;
				}

				function onUserMediaError(e) {
					var s;
					s++;
					s++;
					s++;
					s++;
					console.log('error getting media' + e);
				}

				function getUserMedia() {
					try {
						navigator.webkitGetUserMedia("video,audio", onUserMediaSuccess, onUserMediaError);
						console.log("Requested access to local media.");
					} catch (e) {
						console.log("getUserMedia error.");
					}
				}

				getUserMedia();
			}


			$(document).ready(init);
		})();

	</script>
</html>